{
  "components": {
    "comp-add-external-data": {
      "executorLabel": "exec-add-external-data",
      "inputDefinitions": {
        "artifacts": {
          "test_file": {
            "artifactType": {
              "schemaTitle": "system.Artifact",
              "schemaVersion": "0.0.1"
            }
          },
          "train_file": {
            "artifactType": {
              "schemaTitle": "system.Artifact",
              "schemaVersion": "0.0.1"
            }
          }
        }
      },
      "outputDefinitions": {
        "artifacts": {
          "test_enriched_file": {
            "artifactType": {
              "schemaTitle": "system.Artifact",
              "schemaVersion": "0.0.1"
            }
          },
          "train_enriched_file": {
            "artifactType": {
              "schemaTitle": "system.Artifact",
              "schemaVersion": "0.0.1"
            }
          }
        }
      }
    },
    "comp-clean-with-isolation-forest": {
      "executorLabel": "exec-clean-with-isolation-forest",
      "inputDefinitions": {
        "artifacts": {
          "test_file": {
            "artifactType": {
              "schemaTitle": "system.Artifact",
              "schemaVersion": "0.0.1"
            }
          },
          "train_file": {
            "artifactType": {
              "schemaTitle": "system.Artifact",
              "schemaVersion": "0.0.1"
            }
          }
        }
      },
      "outputDefinitions": {
        "artifacts": {
          "test_cleaned_file": {
            "artifactType": {
              "schemaTitle": "system.Artifact",
              "schemaVersion": "0.0.1"
            }
          },
          "train_cleaned_file": {
            "artifactType": {
              "schemaTitle": "system.Artifact",
              "schemaVersion": "0.0.1"
            }
          }
        }
      }
    },
    "comp-encode-features": {
      "executorLabel": "exec-encode-features",
      "inputDefinitions": {
        "artifacts": {
          "test_file": {
            "artifactType": {
              "schemaTitle": "system.Artifact",
              "schemaVersion": "0.0.1"
            }
          },
          "train_file": {
            "artifactType": {
              "schemaTitle": "system.Artifact",
              "schemaVersion": "0.0.1"
            }
          }
        }
      },
      "outputDefinitions": {
        "artifacts": {
          "test_encoded_file": {
            "artifactType": {
              "schemaTitle": "system.Artifact",
              "schemaVersion": "0.0.1"
            }
          },
          "train_encoded_file": {
            "artifactType": {
              "schemaTitle": "system.Artifact",
              "schemaVersion": "0.0.1"
            }
          }
        }
      }
    },
    "comp-load-data": {
      "executorLabel": "exec-load-data",
      "inputDefinitions": {
        "parameters": {
          "data_path": {
            "parameterType": "STRING"
          }
        }
      },
      "outputDefinitions": {
        "artifacts": {
          "test_file": {
            "artifactType": {
              "schemaTitle": "system.Artifact",
              "schemaVersion": "0.0.1"
            }
          },
          "train_file": {
            "artifactType": {
              "schemaTitle": "system.Artifact",
              "schemaVersion": "0.0.1"
            }
          }
        }
      }
    },
    "comp-select-feature": {
      "executorLabel": "exec-select-feature",
      "inputDefinitions": {
        "artifacts": {
          "test_file": {
            "artifactType": {
              "schemaTitle": "system.Artifact",
              "schemaVersion": "0.0.1"
            }
          },
          "train_file": {
            "artifactType": {
              "schemaTitle": "system.Artifact",
              "schemaVersion": "0.0.1"
            }
          }
        }
      },
      "outputDefinitions": {
        "artifacts": {
          "test_selected_feature_file": {
            "artifactType": {
              "schemaTitle": "system.Artifact",
              "schemaVersion": "0.0.1"
            }
          },
          "train_selected_feature_file": {
            "artifactType": {
              "schemaTitle": "system.Artifact",
              "schemaVersion": "0.0.1"
            }
          }
        }
      }
    },
    "comp-train-ensemble-model": {
      "executorLabel": "exec-train-ensemble-model",
      "inputDefinitions": {
        "artifacts": {
          "test_file": {
            "artifactType": {
              "schemaTitle": "system.Artifact",
              "schemaVersion": "0.0.1"
            }
          },
          "train_file": {
            "artifactType": {
              "schemaTitle": "system.Artifact",
              "schemaVersion": "0.0.1"
            }
          }
        }
      },
      "outputDefinitions": {
        "artifacts": {
          "catboost_model_file": {
            "artifactType": {
              "schemaTitle": "system.Artifact",
              "schemaVersion": "0.0.1"
            }
          },
          "metrics": {
            "artifactType": {
              "schemaTitle": "system.Metrics",
              "schemaVersion": "0.0.1"
            }
          },
          "metrics_file": {
            "artifactType": {
              "schemaTitle": "system.Artifact",
              "schemaVersion": "0.0.1"
            }
          },
          "parameters_file": {
            "artifactType": {
              "schemaTitle": "system.Artifact",
              "schemaVersion": "0.0.1"
            }
          },
          "predictions_file": {
            "artifactType": {
              "schemaTitle": "system.Artifact",
              "schemaVersion": "0.0.1"
            }
          },
          "xgboost_model_file": {
            "artifactType": {
              "schemaTitle": "system.Artifact",
              "schemaVersion": "0.0.1"
            }
          }
        }
      }
    }
  },
  "deploymentSpec": {
    "executors": {
      "exec-add-external-data": {
        "container": {
          "args": [
            "--executor_input",
            "{{$}}",
            "--function_to_execute",
            "add_external_data"
          ],
          "command": [
            "sh",
            "-c",
            "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip || python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet     --no-warn-script-location 'pandas' 'kfp==2.0.0' && \"$0\" \"$@\"\n",
            "sh",
            "-ec",
            "program_path=$(mktemp -d)\nprintf \"%s\" \"$0\" > \"$program_path/ephemeral_component.py\"\npython3 -m kfp.components.executor_main                         --component_module_path                         \"$program_path/ephemeral_component.py\"                         \"$@\"\n",
            "\nimport kfp\nfrom kfp import dsl\nfrom kfp.dsl import *\nfrom typing import *\n\ndef add_external_data(\n        train_file: InputPath('CSV'),\n        test_file: InputPath('CSV'),\n        train_enriched_file: OutputPath('CSV'),\n        test_enriched_file: OutputPath('CSV')\n):\n    \"\"\"Adds external aircraft information.\"\"\"\n    import pandas as pd\n\n    external_information = {\n        \"B738\": {\n            \"MTOW(kg)\": 70530,\n            \"passengers\": 162,\n            \"ROC_Initial_Climb(ft/min)\": 3000,\n            \"V2 (IAS)\": 145,\n        },\n        \"A333\": {\n            \"MTOW(kg)\": 230000,\n            \"passengers\": 295,\n            \"ROC_Initial_Climb(ft/min)\": 2000,\n            \"V2 (IAS)\": 145,\n        },\n        \"B77W\": {\n            \"MTOW(kg)\": 351500,\n            \"passengers\": 365,\n            \"ROC_Initial_Climb(ft/min)\": 2000,\n            \"V2 (IAS)\": 149,\n        },\n        \"B38M\": {\n            \"MTOW(kg)\": 82600,\n            \"passengers\": 162,\n            \"ROC_Initial_Climb(ft/min)\": 2500,\n            \"V2 (IAS)\": 145,\n        },\n        \"A320\": {\n            \"MTOW(kg)\": 73900,\n            \"passengers\": 150,\n            \"ROC_Initial_Climb(ft/min)\": 2500,\n            \"V2 (IAS)\": 145,\n        },\n        \"E190\": {\n            \"MTOW(kg)\": 45995,\n            \"passengers\": 94,\n            \"ROC_Initial_Climb(ft/min)\": 3400,\n            \"V2 (IAS)\": 138,\n        },\n        \"CRJ9\": {\n            \"MTOW(kg)\": 38330,\n            \"passengers\": 80,\n            \"ROC_Initial_Climb(ft/min)\": 2500,\n            \"V2 (IAS)\": 140,\n        },\n        \"A21N\": {\n            \"MTOW(kg)\": 97000,\n            \"passengers\": 180,\n            \"ROC_Initial_Climb(ft/min)\": 2000,\n            \"V2 (IAS)\": 145,\n        },\n        \"A20N\": {\n            \"MTOW(kg)\": 79000,\n            \"passengers\": 150,\n            \"ROC_Initial_Climb(ft/min)\": 2200,\n            \"V2 (IAS)\": 145,\n        },\n        \"B739\": {\n            \"MTOW(kg)\": 79015,\n            \"passengers\": 177,\n            \"ROC_Initial_Climb(ft/min)\": 3000,\n            \"V2 (IAS)\": 149,\n        },\n        \"BCS3\": {\n            \"MTOW(kg)\": 69900,\n            \"passengers\": 120,\n            \"ROC_Initial_Climb(ft/min)\": 3100,\n            \"V2 (IAS)\": 165,\n        },\n        \"E195\": {\n            \"MTOW(kg)\": 52290,\n            \"passengers\": 100,\n            \"ROC_Initial_Climb(ft/min)\": 3000,\n            \"V2 (IAS)\": 140,\n        },\n        \"A321\": {\n            \"MTOW(kg)\": 83000,\n            \"passengers\": 185,\n            \"ROC_Initial_Climb(ft/min)\": 2500,\n            \"V2 (IAS)\": 145,\n        },\n        \"A359\": {\n            \"MTOW(kg)\": 268000,\n            \"passengers\": 314,\n            \"ROC_Initial_Climb(ft/min)\": 3000,\n            \"V2 (IAS)\": 150,\n        },\n        \"A319\": {\n            \"MTOW(kg)\": 64000,\n            \"passengers\": 124,\n            \"ROC_Initial_Climb(ft/min)\": 2500,\n            \"V2 (IAS)\": 135,\n        },\n        \"A332\": {\n            \"MTOW(kg)\": 230000,\n            \"passengers\": 253,\n            \"ROC_Initial_Climb(ft/min)\": 2000,\n            \"V2 (IAS)\": 145,\n        },\n        \"B788\": {\n            \"MTOW(kg)\": 228000,\n            \"passengers\": 210,\n            \"ROC_Initial_Climb(ft/min)\": 2700,\n            \"V2 (IAS)\": 165,\n        },\n        \"B789\": {\n            \"MTOW(kg)\": 253000,\n            \"passengers\": 406,\n            \"ROC_Initial_Climb(ft/min)\": 3000,\n            \"V2 (IAS)\": 165,\n        },\n        \"BCS1\": {\n            \"MTOW(kg)\": 63100,\n            \"passengers\": 100,\n            \"ROC_Initial_Climb(ft/min)\": 3500,\n            \"V2 (IAS)\": 140,\n        },\n        \"B763\": {\n            \"MTOW(kg)\": 186880,\n            \"passengers\": 269,\n            \"ROC_Initial_Climb(ft/min)\": 3000,\n            \"V2 (IAS)\": 160,\n        },\n        \"AT76\": {\n            \"MTOW(kg)\": 23000,\n            \"passengers\": 78,\n            \"ROC_Initial_Climb(ft/min)\": 1350,\n            \"V2 (IAS)\": 116,\n        },\n        \"B772\": {\n            \"MTOW(kg)\": 247210,\n            \"passengers\": 305,\n            \"ROC_Initial_Climb(ft/min)\": 3000,\n            \"V2 (IAS)\": 170,\n        },\n        \"B737\": {\n            \"MTOW(kg)\": 66320,\n            \"passengers\": 128,\n            \"ROC_Initial_Climb(ft/min)\": 3000,\n            \"V2 (IAS)\": 150,\n        },\n        \"A343\": {\n            \"MTOW(kg)\": 275000,\n            \"passengers\": 295,\n            \"ROC_Initial_Climb(ft/min)\": 1400,\n            \"V2 (IAS)\": 145,\n        },\n        \"B39M\": {\n            \"MTOW(kg)\": 88300,\n            \"passengers\": 178,\n            \"ROC_Initial_Climb(ft/min)\": 2300,\n            \"V2 (IAS)\": 150,\n        },\n        \"B752\": {\n            \"MTOW(kg)\": 115680,\n            \"passengers\": 200,\n            \"ROC_Initial_Climb(ft/min)\": 3500,\n            \"V2 (IAS)\": 145,\n        },\n        \"B773\": {\n            \"MTOW(kg)\": 299370,\n            \"passengers\": 368,\n            \"ROC_Initial_Climb(ft/min)\": 3000,\n            \"V2 (IAS)\": 168,\n        },\n        \"E290\": {\n            \"MTOW(kg)\": 45995,\n            \"passengers\": 94,\n            \"ROC_Initial_Climb(ft/min)\": 3400,\n            \"V2 (IAS)\": 138,\n        },\n    }\n\n    train_df = pd.read_csv(train_file)\n    test_df = pd.read_csv(test_file)\n\n    external_df = pd.DataFrame.from_dict(external_information, orient='index')\n    external_df.reset_index(inplace=True)\n    external_df.rename(columns={'index': 'aircraft_type'}, inplace=True)\n\n    train_enriched = pd.merge(train_df, external_df, on='aircraft_type',\n                              how='left')\n    test_enriched = pd.merge(test_df, external_df, on='aircraft_type',\n                             how='left')\n\n    train_enriched.to_csv(train_enriched_file, index=False)\n    test_enriched.to_csv(test_enriched_file, index=False)\n\n"
          ],
          "image": "python:3.7"
        }
      },
      "exec-clean-with-isolation-forest": {
        "container": {
          "args": [
            "--executor_input",
            "{{$}}",
            "--function_to_execute",
            "clean_with_isolation_forest"
          ],
          "command": [
            "sh",
            "-c",
            "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip || python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet     --no-warn-script-location 'pandas' 'scikit-learn' 'kfp==2.0.0' && \"$0\" \"$@\"\n",
            "sh",
            "-ec",
            "program_path=$(mktemp -d)\nprintf \"%s\" \"$0\" > \"$program_path/ephemeral_component.py\"\npython3 -m kfp.components.executor_main                         --component_module_path                         \"$program_path/ephemeral_component.py\"                         \"$@\"\n",
            "\nimport kfp\nfrom kfp import dsl\nfrom kfp.dsl import *\nfrom typing import *\n\ndef clean_with_isolation_forest(\n        train_file: InputPath('CSV'),\n        test_file: InputPath('CSV'),\n        train_cleaned_file: OutputPath('CSV'),\n        test_cleaned_file: OutputPath('CSV')\n):\n    \"\"\"Cleans data using Isolation Forest.\"\"\"\n    import pandas as pd\n    import numpy as np\n    from sklearn.ensemble import IsolationForest\n    from sklearn.preprocessing import StandardScaler\n\n    def clean_dataframe_with_isolation_forest(df, contamination=0.01):\n        cleaned_df = df.copy()\n        cleaned_df = cleaned_df.dropna()\n\n        numeric_columns = cleaned_df.select_dtypes(include=[np.number]).columns\n        scaler = StandardScaler()\n        scaled_data = scaler.fit_transform(cleaned_df[numeric_columns])\n\n        iso_forest = IsolationForest(contamination=contamination,\n                                     random_state=42)\n        outlier_labels = iso_forest.fit_predict(scaled_data)\n        cleaned_df = cleaned_df[outlier_labels == 1].reset_index(drop=True)\n\n        return cleaned_df\n\n    train_df = pd.read_csv(train_file)\n    test_df = pd.read_csv(test_file)\n\n    train_cleaned = clean_dataframe_with_isolation_forest(train_df)\n    test_cleaned = clean_dataframe_with_isolation_forest(test_df)\n\n    train_cleaned.to_csv(train_cleaned_file, index=False)\n    test_cleaned.to_csv(test_cleaned_file, index=False)\n\n"
          ],
          "image": "python:3.7"
        }
      },
      "exec-encode-features": {
        "container": {
          "args": [
            "--executor_input",
            "{{$}}",
            "--function_to_execute",
            "encode_features"
          ],
          "command": [
            "sh",
            "-c",
            "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip || python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet     --no-warn-script-location 'pandas' 'scikit-learn' 'kfp==2.0.0' && \"$0\" \"$@\"\n",
            "sh",
            "-ec",
            "program_path=$(mktemp -d)\nprintf \"%s\" \"$0\" > \"$program_path/ephemeral_component.py\"\npython3 -m kfp.components.executor_main                         --component_module_path                         \"$program_path/ephemeral_component.py\"                         \"$@\"\n",
            "\nimport kfp\nfrom kfp import dsl\nfrom kfp.dsl import *\nfrom typing import *\n\ndef encode_features(\n        train_file: InputPath('CSV'),\n        test_file: InputPath('CSV'),\n        train_encoded_file: OutputPath('CSV'),\n        test_encoded_file: OutputPath('CSV')\n):\n    \"\"\"Encodes categorical features.\"\"\"\n    import pandas as pd\n    from sklearn.preprocessing import LabelEncoder\n\n    def encode_categorical_features(df):\n        categorical_col = [\"adep\", \"country_code_adep\", \"ades\",\n                           \"country_code_ades\",\n                           \"aircraft_type\", \"airline\"]\n\n        encoder = LabelEncoder()\n        for col in categorical_col:\n            df[col + \"_encoded\"] = encoder.fit_transform(df[col])\n            df = df.drop(columns=[col])\n\n        df = pd.get_dummies(df, columns=[\"wtc\"])\n        df[\"wtc_M\"] = df[\"wtc_M\"].astype(int)\n        df[\"wtc_H\"] = df[\"wtc_H\"].astype(int)\n\n        return df\n\n    train_df = pd.read_csv(train_file)\n    test_df = pd.read_csv(test_file)\n\n    train_encoded = encode_categorical_features(train_df)\n    test_encoded = encode_categorical_features(test_df)\n\n    train_encoded.to_csv(train_encoded_file, index=False)\n    test_encoded.to_csv(test_encoded_file, index=False)\n\n"
          ],
          "image": "python:3.7"
        }
      },
      "exec-load-data": {
        "container": {
          "args": [
            "--executor_input",
            "{{$}}",
            "--function_to_execute",
            "load_data"
          ],
          "command": [
            "sh",
            "-c",
            "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip || python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet     --no-warn-script-location 'pandas' 'fsspec' 'gcsfs' 'kfp==2.0.0' && \"$0\" \"$@\"\n",
            "sh",
            "-ec",
            "program_path=$(mktemp -d)\nprintf \"%s\" \"$0\" > \"$program_path/ephemeral_component.py\"\npython3 -m kfp.components.executor_main                         --component_module_path                         \"$program_path/ephemeral_component.py\"                         \"$@\"\n",
            "\nimport kfp\nfrom kfp import dsl\nfrom kfp.dsl import *\nfrom typing import *\n\ndef load_data(\n        data_path: str,\n        train_file: OutputPath('CSV'),\n        test_file: OutputPath('CSV')\n):\n    \"\"\"Loads and preprocesses the data.\"\"\"\n    import pandas as pd\n\n    train_df = pd.read_csv(f\"{data_path}/challenge_set.csv\",\n                           parse_dates=['date', 'actual_offblock_time',\n                                        'arrival_time'])\n    test_df = pd.read_csv(f\"{data_path}/submission_set.csv\",\n                          parse_dates=['date', 'actual_offblock_time',\n                                       'arrival_time']).drop([\"tow\"], axis=1)\n\n    def get_duration(df):\n        df['duration'] = (df['arrival_time'] - df[\n            'actual_offblock_time']).dt.total_seconds() / 60\n        return df\n\n    train_df = get_duration(train_df)\n    test_df = get_duration(test_df)\n\n    datetime_columns = ['date', 'actual_offblock_time', 'arrival_time']\n    for col in datetime_columns:\n        train_df[col] = train_df[col].dt.strftime('%Y-%m-%d %H:%M:%S')\n        test_df[col] = test_df[col].dt.strftime('%Y-%m-%d %H:%M:%S')\n\n    train_df.to_csv(train_file, index=False)\n    test_df.to_csv(test_file, index=False)\n\n"
          ],
          "image": "python:3.7"
        }
      },
      "exec-select-feature": {
        "container": {
          "args": [
            "--executor_input",
            "{{$}}",
            "--function_to_execute",
            "select_feature"
          ],
          "command": [
            "sh",
            "-c",
            "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip || python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet     --no-warn-script-location 'pandas' 'kfp==2.0.0' && \"$0\" \"$@\"\n",
            "sh",
            "-ec",
            "program_path=$(mktemp -d)\nprintf \"%s\" \"$0\" > \"$program_path/ephemeral_component.py\"\npython3 -m kfp.components.executor_main                         --component_module_path                         \"$program_path/ephemeral_component.py\"                         \"$@\"\n",
            "\nimport kfp\nfrom kfp import dsl\nfrom kfp.dsl import *\nfrom typing import *\n\ndef select_feature(\n        train_file: InputPath('CSV'),\n        test_file: InputPath('CSV'),\n        train_selected_feature_file: OutputPath('CSV'),\n        test_selected_feature_file: OutputPath('CSV'),\n):\n    import pandas as pd\n\n    def drop_features(df):\n        drop_cols = [\n            # \"flight_id\",\n            \"date\",\n            \"callsign\",\n            \"name_adep\",\n            \"name_ades\",\n            \"actual_offblock_time\",\n            \"arrival_time\",\n        ]\n        dropped_df = df.drop(columns=drop_cols, errors='ignore')\n\n        return dropped_df\n\n    train_df = pd.read_csv(train_file)\n    test_df = pd.read_csv(test_file)\n\n    train_df = drop_features(train_df)\n    test_df = drop_features(test_df)\n\n    train_df.to_csv(train_selected_feature_file, index=False)\n    test_df.to_csv(test_selected_feature_file, index=False)\n\n"
          ],
          "image": "python:3.7"
        }
      },
      "exec-train-ensemble-model": {
        "container": {
          "args": [
            "--executor_input",
            "{{$}}",
            "--function_to_execute",
            "train_ensemble_model"
          ],
          "command": [
            "sh",
            "-c",
            "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip || python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet     --no-warn-script-location 'pandas' 'scikit-learn' 'xgboost' 'catboost' 'kfp==2.0.0' && \"$0\" \"$@\"\n",
            "sh",
            "-ec",
            "program_path=$(mktemp -d)\nprintf \"%s\" \"$0\" > \"$program_path/ephemeral_component.py\"\npython3 -m kfp.components.executor_main                         --component_module_path                         \"$program_path/ephemeral_component.py\"                         \"$@\"\n",
            "\nimport kfp\nfrom kfp import dsl\nfrom kfp.dsl import *\nfrom typing import *\n\ndef train_ensemble_model(\n        train_file: InputPath('CSV'),\n        test_file: InputPath('CSV'),\n        catboost_model_file: OutputPath('Joblib'),\n        xgboost_model_file: OutputPath('Joblib'),\n        predictions_file: OutputPath('CSV'),\n        metrics_file: OutputPath('CSV'),\n        parameters_file: OutputPath('JSON'),\n        metrics: Output[Metrics]\n):\n    \"\"\"Trains an ensemble of CatBoost and XGBoost models.\"\"\"\n    import pandas as pd\n    from catboost import CatBoostRegressor\n    from xgboost import XGBRegressor\n    from sklearn.metrics import mean_squared_error\n    import numpy as np\n    import joblib\n    import json\n\n    train_df = pd.read_csv(train_file)\n\n    X_train = train_df.drop(['tow'], axis=1)\n    y_train = train_df['tow']\n\n\n    catboost_params = {\n        'random_state': 42,\n        'depth': 9,\n        'iterations': 2000,\n        'learning_rate': 0.15\n    }\n\n    xgboost_params = {\n        'random_state': 42,\n        'learning_rate': 0.05,\n        'max_depth': 8,\n        'n_estimators': 2000\n    }\n\n    parameters = {\n        'train_samples': len(X_train),\n        'features': list(X_train.columns),\n        'catboost_params': catboost_params,\n        'xgboost_params': xgboost_params\n    }\n\n    with open(parameters_file, 'w') as f:\n        json.dump(parameters, f)\n\n    catboost_model = CatBoostRegressor(**catboost_params)\n    catboost_model.fit(X_train, y_train)\n    catboost_pred = catboost_model.predict(X_train)\n    catboost_rmse = np.sqrt(mean_squared_error(y_train, catboost_pred))\n\n    xgboost_model = XGBRegressor(**xgboost_params)\n    xgboost_model.fit(X_train, y_train)\n    xgboost_pred = xgboost_model.predict(X_train)\n    xgboost_rmse = np.sqrt(mean_squared_error(y_train, xgboost_pred))\n\n    metrics.log_metric(\"catboost_rmse\", catboost_rmse)\n    metrics.log_metric(\"xgboost_rmse\", xgboost_rmse)\n\n    ensemble_pred = (catboost_pred + xgboost_pred) / 2\n    ensemble_rmse = np.sqrt(mean_squared_error(y_train, ensemble_pred))\n    metrics.log_metric(\"ensemble_rmse\", ensemble_rmse)\n\n    joblib.dump(catboost_model, catboost_model_file)\n    joblib.dump(xgboost_model, xgboost_model_file)\n\n    results_df = pd.DataFrame({\n        'flight_id': X_train['flight_id'],\n        'tow': ensemble_pred\n    })\n    results_df.to_csv(predictions_file, index=False)\n\n    metrics_df = pd.DataFrame({\n        'metric': [\n            'CatBoost RMSE',\n            'XGBoost RMSE',\n            'Ensemble RMSE'\n        ],\n        'value': [\n            catboost_rmse,\n            xgboost_rmse,\n            ensemble_rmse\n        ]\n    })\n    metrics_df.to_csv(metrics_file, index=False)\n\n"
          ],
          "image": "python:3.7"
        }
      }
    }
  },
  "pipelineInfo": {
    "description": "Pipeline for predicting Take-Off Weight (TOW)",
    "name": "flight-tow-prediction-pipeline"
  },
  "root": {
    "dag": {
      "outputs": {
        "artifacts": {
          "train-ensemble-model-metrics": {
            "artifactSelectors": [
              {
                "outputArtifactKey": "metrics",
                "producerSubtask": "train-ensemble-model"
              }
            ]
          }
        }
      },
      "tasks": {
        "add-external-data": {
          "cachingOptions": {
            "enableCache": true
          },
          "componentRef": {
            "name": "comp-add-external-data"
          },
          "dependentTasks": [
            "load-data"
          ],
          "inputs": {
            "artifacts": {
              "test_file": {
                "taskOutputArtifact": {
                  "outputArtifactKey": "test_file",
                  "producerTask": "load-data"
                }
              },
              "train_file": {
                "taskOutputArtifact": {
                  "outputArtifactKey": "train_file",
                  "producerTask": "load-data"
                }
              }
            }
          },
          "taskInfo": {
            "name": "add-external-data"
          }
        },
        "clean-with-isolation-forest": {
          "cachingOptions": {
            "enableCache": true
          },
          "componentRef": {
            "name": "comp-clean-with-isolation-forest"
          },
          "dependentTasks": [
            "add-external-data"
          ],
          "inputs": {
            "artifacts": {
              "test_file": {
                "taskOutputArtifact": {
                  "outputArtifactKey": "test_enriched_file",
                  "producerTask": "add-external-data"
                }
              },
              "train_file": {
                "taskOutputArtifact": {
                  "outputArtifactKey": "train_enriched_file",
                  "producerTask": "add-external-data"
                }
              }
            }
          },
          "taskInfo": {
            "name": "clean-with-isolation-forest"
          }
        },
        "encode-features": {
          "cachingOptions": {
            "enableCache": true
          },
          "componentRef": {
            "name": "comp-encode-features"
          },
          "dependentTasks": [
            "clean-with-isolation-forest"
          ],
          "inputs": {
            "artifacts": {
              "test_file": {
                "taskOutputArtifact": {
                  "outputArtifactKey": "test_cleaned_file",
                  "producerTask": "clean-with-isolation-forest"
                }
              },
              "train_file": {
                "taskOutputArtifact": {
                  "outputArtifactKey": "train_cleaned_file",
                  "producerTask": "clean-with-isolation-forest"
                }
              }
            }
          },
          "taskInfo": {
            "name": "encode-features"
          }
        },
        "load-data": {
          "cachingOptions": {
            "enableCache": true
          },
          "componentRef": {
            "name": "comp-load-data"
          },
          "inputs": {
            "parameters": {
              "data_path": {
                "componentInputParameter": "data_path"
              }
            }
          },
          "taskInfo": {
            "name": "load-data"
          }
        },
        "select-feature": {
          "cachingOptions": {
            "enableCache": true
          },
          "componentRef": {
            "name": "comp-select-feature"
          },
          "dependentTasks": [
            "encode-features"
          ],
          "inputs": {
            "artifacts": {
              "test_file": {
                "taskOutputArtifact": {
                  "outputArtifactKey": "test_encoded_file",
                  "producerTask": "encode-features"
                }
              },
              "train_file": {
                "taskOutputArtifact": {
                  "outputArtifactKey": "train_encoded_file",
                  "producerTask": "encode-features"
                }
              }
            }
          },
          "taskInfo": {
            "name": "select-feature"
          }
        },
        "train-ensemble-model": {
          "cachingOptions": {
            "enableCache": true
          },
          "componentRef": {
            "name": "comp-train-ensemble-model"
          },
          "dependentTasks": [
            "select-feature"
          ],
          "inputs": {
            "artifacts": {
              "test_file": {
                "taskOutputArtifact": {
                  "outputArtifactKey": "test_selected_feature_file",
                  "producerTask": "select-feature"
                }
              },
              "train_file": {
                "taskOutputArtifact": {
                  "outputArtifactKey": "train_selected_feature_file",
                  "producerTask": "select-feature"
                }
              }
            }
          },
          "taskInfo": {
            "name": "train-ensemble-model"
          }
        }
      }
    },
    "inputDefinitions": {
      "parameters": {
        "data_path": {
          "parameterType": "STRING"
        }
      }
    },
    "outputDefinitions": {
      "artifacts": {
        "train-ensemble-model-metrics": {
          "artifactType": {
            "schemaTitle": "system.Metrics",
            "schemaVersion": "0.0.1"
          }
        }
      }
    }
  },
  "schemaVersion": "2.1.0",
  "sdkVersion": "kfp-2.0.0"
}